nano spark_weather_stream
from pyspark.sql import SparkSession
from pyspark.sql.functions import col, from_json
from pyspark.sql.types import StructType, StructField, StringType, FloatType

# Start Spark session
spark = SparkSession.builder \
    .appName("WeatherAnalysis") \
    .config("spark.sql.streaming.forceDeleteTempCheckpointLocation", "true") \
    .getOrCreate()

# Define schema
schema = StructType([
    StructField("city", StringType(), True),
    StructField("temperature", FloatType(), True),
    StructField("humidity", FloatType(), True),
    StructField("pressure", FloatType(), True),
    StructField("wind_speed", FloatType(), True),
    StructField("cloud_coverage", FloatType(), True)
])

# Read Kafka stream
df = spark \
    .readStream \
    .format("kafka") \
    .option("kafka.bootstrap.servers", "localhost:9092") \
    .option("subscribe", "WeatherTopic") \
    .load() \
    .selectExpr("CAST(value AS STRING)") \
    .select(from_json(col("value"), schema).alias("data")) \
    .select("data.city", "data.temperature", "data.humidity", "data.pressure", "data.wind_speed", "data.cloud_coverage")

# Store weather data in HDFS
df.writeStream \
    .outputMode("append") \
    .format("parquet") \
    .option("path", "hdfs://localhost:9000/weather_data/raw") \
    .option("checkpointLocation", "/tmp/spark-checkpoints") \
    .option("truncate", "false") \
    .option("maxRecordsPerFile", 50) \
    .option("trigger", "10 seconds") \
    .start() \
    .awaitTermination()
